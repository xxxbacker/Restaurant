// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: cheque.sql

package db

import (
	"context"
	"database/sql"
)

const createCheque = `-- name: CreateCheque :one
INSERT INTO cheque (
    price, ord_id
) VALUES (
             $1, $2
         )
    RETURNING cheque_id, price, pay_method, pay_status, created_at, ord_id
`

type CreateChequeParams struct {
	Price int32         `json:"price"`
	OrdID sql.NullInt64 `json:"ord_id"`
}

func (q *Queries) CreateCheque(ctx context.Context, arg CreateChequeParams) (Cheque, error) {
	row := q.db.QueryRowContext(ctx, createCheque, arg.Price, arg.OrdID)
	var i Cheque
	err := row.Scan(
		&i.ChequeID,
		&i.Price,
		&i.PayMethod,
		&i.PayStatus,
		&i.CreatedAt,
		&i.OrdID,
	)
	return i, err
}

const deleteCheque = `-- name: DeleteCheque :exec
DELETE FROM cheque
WHERE cheque_id = $1
`

func (q *Queries) DeleteCheque(ctx context.Context, chequeID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCheque, chequeID)
	return err
}

const getCheque = `-- name: GetCheque :one
SELECT cheque_id, price, pay_method, pay_status, created_at, ord_id FROM cheque
WHERE cheque_id = $1 LIMIT 1
`

func (q *Queries) GetCheque(ctx context.Context, chequeID int32) (Cheque, error) {
	row := q.db.QueryRowContext(ctx, getCheque, chequeID)
	var i Cheque
	err := row.Scan(
		&i.ChequeID,
		&i.Price,
		&i.PayMethod,
		&i.PayStatus,
		&i.CreatedAt,
		&i.OrdID,
	)
	return i, err
}

const listCheque = `-- name: ListCheque :many
SELECT cheque_id, price, pay_method, pay_status, created_at, ord_id FROM cheque
ORDER BY cheque_id DESC
LIMIT $1
`

func (q *Queries) ListCheque(ctx context.Context, limit int32) ([]Cheque, error) {
	rows, err := q.db.QueryContext(ctx, listCheque, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Cheque{}
	for rows.Next() {
		var i Cheque
		if err := rows.Scan(
			&i.ChequeID,
			&i.Price,
			&i.PayMethod,
			&i.PayStatus,
			&i.CreatedAt,
			&i.OrdID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
