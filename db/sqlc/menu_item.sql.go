// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: menu_item.sql

package db

import (
	"context"
)

const createMenu_item = `-- name: CreateMenu_item :one
INSERT INTO menu_item (
    title, category, price
) VALUES (
             $1, $2, $3
         )
    RETURNING menu_id, title, category, price, created_at
`

type CreateMenu_itemParams struct {
	Title    string `json:"title"`
	Category string `json:"category"`
	Price    int32  `json:"price"`
}

func (q *Queries) CreateMenu_item(ctx context.Context, arg CreateMenu_itemParams) (MenuItem, error) {
	row := q.db.QueryRowContext(ctx, createMenu_item, arg.Title, arg.Category, arg.Price)
	var i MenuItem
	err := row.Scan(
		&i.MenuID,
		&i.Title,
		&i.Category,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMenu_item = `-- name: DeleteMenu_item :exec
DELETE FROM menu_item
WHERE menu_id = $1
`

func (q *Queries) DeleteMenu_item(ctx context.Context, menuID int32) error {
	_, err := q.db.ExecContext(ctx, deleteMenu_item, menuID)
	return err
}

const getMenu_item = `-- name: GetMenu_item :one
SELECT menu_id, title, category, price, created_at FROM menu_item
WHERE menu_id = $1 LIMIT 1
`

func (q *Queries) GetMenu_item(ctx context.Context, menuID int32) (MenuItem, error) {
	row := q.db.QueryRowContext(ctx, getMenu_item, menuID)
	var i MenuItem
	err := row.Scan(
		&i.MenuID,
		&i.Title,
		&i.Category,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const listMenu_item = `-- name: ListMenu_item :many
SELECT menu_id, title, category, price, created_at FROM menu_item
ORDER BY menu_id
    LIMIT $1
OFFSET $2
`

type ListMenu_itemParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMenu_item(ctx context.Context, arg ListMenu_itemParams) ([]MenuItem, error) {
	rows, err := q.db.QueryContext(ctx, listMenu_item, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MenuItem{}
	for rows.Next() {
		var i MenuItem
		if err := rows.Scan(
			&i.MenuID,
			&i.Title,
			&i.Category,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
