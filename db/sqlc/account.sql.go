// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: account.sql

package db

import (
	"context"
	"time"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO account (
    post, nickname, password, phone, created_at
) VALUES (
             $1, $2, $3, $4, $5
         )
    RETURNING account_id, post, nickname, password, phone, created_at
`

type CreateAccountParams struct {
	Post      string    `json:"post"`
	Nickname  string    `json:"nickname"`
	Password  string    `json:"password"`
	Phone     string    `json:"phone"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Post,
		arg.Nickname,
		arg.Password,
		arg.Phone,
		arg.CreatedAt,
	)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Post,
		&i.Nickname,
		&i.Password,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM account
WHERE account_id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, accountID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, accountID)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT account_id, post, nickname, password, phone, created_at FROM account
WHERE account_id = $1 LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, accountID int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, accountID)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Post,
		&i.Nickname,
		&i.Password,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountForPassword = `-- name: GetAccountForPassword :one
SELECT account_id, post, nickname, password, phone, created_at FROM account
WHERE phone = $1 and password = $2
LIMIT 1
`

type GetAccountForPasswordParams struct {
	Phone    string `json:"phone"`
	Password string `json:"password"`
}

func (q *Queries) GetAccountForPassword(ctx context.Context, arg GetAccountForPasswordParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountForPassword, arg.Phone, arg.Password)
	var i Account
	err := row.Scan(
		&i.AccountID,
		&i.Post,
		&i.Nickname,
		&i.Password,
		&i.Phone,
		&i.CreatedAt,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT account_id, post, nickname, password, phone, created_at FROM account
ORDER BY account_id
    LIMIT $1
OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.AccountID,
			&i.Post,
			&i.Nickname,
			&i.Password,
			&i.Phone,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
