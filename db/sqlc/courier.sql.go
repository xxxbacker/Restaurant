// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: courier.sql

package db

import (
	"context"
)

const createCourier = `-- name: CreateCourier :one
INSERT INTO courier (
    title, phone
) VALUES (
             $1, $2
         )
    RETURNING courier_id, title, phone
`

type CreateCourierParams struct {
	Title string `json:"title"`
	Phone string `json:"phone"`
}

func (q *Queries) CreateCourier(ctx context.Context, arg CreateCourierParams) (Courier, error) {
	row := q.db.QueryRowContext(ctx, createCourier, arg.Title, arg.Phone)
	var i Courier
	err := row.Scan(&i.CourierID, &i.Title, &i.Phone)
	return i, err
}

const deleteCourier = `-- name: DeleteCourier :exec
DELETE FROM courier
WHERE courier_id = $1
`

func (q *Queries) DeleteCourier(ctx context.Context, courierID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCourier, courierID)
	return err
}

const getCourier = `-- name: GetCourier :one
SELECT courier_id, title, phone FROM courier
WHERE courier_id = $1 LIMIT 1
`

func (q *Queries) GetCourier(ctx context.Context, courierID int32) (Courier, error) {
	row := q.db.QueryRowContext(ctx, getCourier, courierID)
	var i Courier
	err := row.Scan(&i.CourierID, &i.Title, &i.Phone)
	return i, err
}

const listCourier = `-- name: ListCourier :many
SELECT courier_id, title, phone FROM courier
ORDER BY courier_id
    LIMIT $1
OFFSET $2
`

type ListCourierParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCourier(ctx context.Context, arg ListCourierParams) ([]Courier, error) {
	rows, err := q.db.QueryContext(ctx, listCourier, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Courier{}
	for rows.Next() {
		var i Courier
		if err := rows.Scan(&i.CourierID, &i.Title, &i.Phone); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
